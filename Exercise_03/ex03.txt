Last login: Tue Aug 30 09:35:53 on ttys007140-182-196-186:~ Owl$ pythonPython 2.7.10 (default, Oct 23 2015, 19:19:21) [GCC 4.2.1 Compatible Apple LLVM 7.0.0 (clang-700.0.59.5)] on darwinType "help", "copyright", "credits" or "license" for more information.>>> cd ..  File "<stdin>", line 1    cd ..        ^SyntaxError: invalid syntax>>> quit()140-182-196-186:~ Owl$ puthon3-bash: puthon3: command not found140-182-196-186:~ Owl$ python3-bash: python3: command not found140-182-196-186:~ Owl$ ssh woha@silo.soic.indiana.eduwoha@silo.soic.indiana.edu's password: Last login: Tue Aug 30 09:29:26 2016 from 140-182-196-186.dhcp-bl.indiana.edu*********************************************************************   Indiana University School of Informatics and Computing      ****             ** For Authorized Use Only **                     ***********************************************************************  For general SoIC computing information, please see:          ****      http://help.soic.indiana.edu/                            ****                                                               ****  To submit a problem report or question, please see:          ****      http://help.soic.indiana.edu/request                     *********************************************************************[woha@silo ~]$ clear[woha@silo ~]$ python3Python 3.5.2 (default, Aug 19 2016, 07:40:05) [GCC 4.8.5 20150623 (Red Hat 4.8.5-4)] on linuxType "help", "copyright", "credits" or "license" for more information.>>> pets = ['ant', 'bat', 'cod', 'dog', 'elk']>>> pets['ant', 'bat', 'cod', 'dog', 'elk']>>> nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]>>> nums[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]>>> ls = [0, 1, 'two', 'three', [4, 'five']]>>> ls[0, 1, 'two', 'three', [4, 'five']]>>> s='hello'>>> s[3]'l'>>> s[4]'o'>>> ls[0, 1, 'two', 'three', [4, 'five']]>>> ls[0]0>>> ls[1]1>>> ls[2]'two'>>> ls[3]'three'>>> ls[4][4, 'five']>>> ls[4][1]'five'>>> ls = [1,2,3]>>> 3 in lsTrue>>> 4 in lsFalse>>> ls + [0, 4][1, 2, 3, 0, 4]>>> 2 * ls[1, 2, 3, 1, 2, 3]>>> ls[0]1>>> ls[1]2>>> ls[-1]3>>> len(ls)3>>> min(ls)1>>> max(ls)3>>> sum(ls)6>>> help(list)sh: more: command not foundHelp on class list in module builtins:class list(object) |  list() -> new empty list |  list(iterable) -> new list initialized from iterable's items |   |  Methods defined here: |   |  __add__(self, value, /) |      Return self+value. |   |  __contains__(self, key, /) |      Return key in self. |   |  __delitem__(self, key, /) |      Delete self[key]. |   |  __eq__(self, value, /) |      Return self==value. |   |  __ge__(self, value, /) |      Return self>=value. |   |  __getattribute__(self, name, /)-- more --Help on class list in module builtins:class list(object) |  list() -> new empty list |  list(iterable) -> new list initialized from iterable's items |   |  Methods defined here: |   |  __add__(self, value, /) |      Return self+value. |   |  __contains__(self, key, /) |      Return key in self. |   |  __delitem__(self, key, /) |      Delete self[key]. |   |  __eq__(self, value, /) |      Return self==value. |   |  __ge__(self, value, /) |      Return self>=value. |   |  __getattribute__(self, name, /)-- more -- |      Return getattr(self, name). |   |  __getitem__(...) |      x.__getitem__(y) <==> x[y] |   |  __gt__(self, value, /) |      Return self>value. |   |  __iadd__(self, value, /) |      Implement self+=value. |   |  __imul__(self, value, /) |      Implement self*=value. |   |  __init__(self, /, *args, **kwargs) |      Initialize self.  See help(type(self)) for accurate signature. |   |  __iter__(self, /) |      Implement iter(self). |   |  __le__(self, value, /) |      Return self<=value. |   |  __len__(self, /)-- more -- |      Return len(self). |   |  __lt__(self, value, /) |      Return self<value. |   |  __mul__(self, value, /) |      Return self*value.n |   |  __ne__(self, value, /) |      Return self!=value. |   |  __new__(*args, **kwargs) from builtins.type |      Create and return a new object.  See help(type) for accurate signature. |   |  __repr__(self, /) |      Return repr(self). |   |  __reversed__(...) |      L.__reversed__() -- return a reverse iterator over the list |   |  __rmul__(self, value, /) |      Return self*value. |   |  __setitem__(self, key, value, /)-- more -- |      Return getattr(self, name). |   |  __getitem__(...) |      x.__getitem__(y) <==> x[y] |   |  __gt__(self, value, /) |      Return self>value. |   |  __iadd__(self, value, /) |      Implement self+=value. |   |  __imul__(self, value, /) |      Implement self*=value. |   |  __init__(self, /, *args, **kwargs) |      Initialize self.  See help(type(self)) for accurate signature. |   |  __iter__(self, /) |      Implement iter(self). |   |  __le__(self, value, /) |      Return self<=value. |   |  __len__(self, /)-- more -- |      Return len(self). |   |  __lt__(self, value, /) |      Return self<value. |   |  __mul__(self, value, /) |      Return self*value.n |   |  __ne__(self, value, /) |      Return self!=value. |   |  __new__(*args, **kwargs) from builtins.type |      Create and return a new object.  See help(type) for accurate signature. |   |  __repr__(self, /) |      Return repr(self). |   |  __reversed__(...) |      L.__reversed__() -- return a reverse iterator over the list |   |  __rmul__(self, value, /) |      Return self*value. |   |  __setitem__(self, key, value, /)-- more -- |      Set self[key] to value. |   |  __sizeof__(...) |      L.__sizeof__() -- size of L in memory, in bytes |   |  append(...) |      L.append(object) -> None -- append object to end |   |  clear(...) |      L.clear() -> None -- remove all items from L |   |  copy(...) |      L.copy() -> list -- a shallow copy of L |   |  count(...) |      L.count(value) -> integer -- return number of occurrences of value |   |  extend(...) |      L.extend(iterable) -> None -- extend list by appending elements from the iterable |   |  index(...) |      L.index(value, [start, [stop]]) -> integer -- return first index of value. |      Raises ValueError if the value is not present. |  -- more -- |      Return len(self). |   |  __lt__(self, value, /) |      Return self<value. |   |  __mul__(self, value, /) |      Return self*value.n |   |  __ne__(self, value, /) |      Return self!=value. |   |  __new__(*args, **kwargs) from builtins.type |      Create and return a new object.  See help(type) for accurate signature. |   |  __repr__(self, /) |      Return repr(self). |   |  __reversed__(...) |      L.__reversed__() -- return a reverse iterator over the list |   |  __rmul__(self, value, /) |      Return self*value. |   |  __setitem__(self, key, value, /)-- more -- |      Set self[key] to value. |   |  __sizeof__(...) |      L.__sizeof__() -- size of L in memory, in bytes |   |  append(...) |      L.append(object) -> None -- append object to end |   |  clear(...) |      L.clear() -> None -- remove all items from L |   |  copy(...) |      L.copy() -> list -- a shallow copy of L |   |  count(...) |      L.count(value) -> integer -- return number of occurrences of value |   |  extend(...) |      L.extend(iterable) -> None -- extend list by appending elements from the iterable |   |  index(...) |      L.index(value, [start, [stop]]) -> integer -- return first index of value. |      Raises ValueError if the value is not present. |  -- more -- |  insert(...) |      L.insert(index, object) -- insert object before index |   |  pop(...) |      L.pop([index]) -> item -- remove and return item at index (default last). |      Raises IndexError if list is empty or index is out of range. |   |  remove(...) |      L.remove(value) -> None -- remove first occurrence of value. |      Raises ValueError if the value is not present. |   |  reverse(...) |      L.reverse() -- reverse *IN PLACE* |   |  sort(...) |      L.sort(key=None, reverse=False) -> None -- stable sort *IN PLACE* |   |  ---------------------------------------------------------------------- |  Data and other attributes defined here: |   |  __hash__ = None>>> pets[2] = 'cow  File "<stdin>", line 1    pets[2] = 'cow                 ^SyntaxError: EOL while scanning string literal>>> pets[2] = 'cow'>>> pets['ant', 'bat', 'cow', 'dog', 'elk']>>> pet = 'cod'>>> ls[1, 2, 3]>>> pet'cod'>>> pet[2]'d'>>> pet = 'cod'>>> pet[2] = 'w'Traceback (most recent call last):  File "<stdin>", line 1, in <module>TypeError: 'str' object does not support item assignment>>> pet[2]=wTraceback (most recent call last):  File "<stdin>", line 1, in <module>NameError: name 'w' is not defined>>> pet[2]="w"Traceback (most recent call last):  File "<stdin>", line 1, in <module>TypeError: 'str' object does not support item assignment>>> help(replace)Traceback (most recent call last):  File "<stdin>", line 1, in <module>NameError: name 'replace' is not defined>>> ls.append(7)>>> ls[1, 2, 3, 7]>>> s'hello'>>> s.count(1)Traceback (most recent call last):  File "<stdin>", line 1, in <module>TypeError: Can't convert 'int' object to str implicitly>>> s.count('l')2>>> ls[1, 2, 3, 7]>>> ls.remove(3)>>> ls.append(3)>>> ls[1, 2, 7, 3]>>> ls[1]=''>>> ls[1, '', 7, 3]>>> ls.pop()3>>> ls[1, '', 7]>>> ls.remove('')>>> ls[1, 7]>>> ls[1:1]=[2]>>> ;s  File "<stdin>", line 1    ;s    ^SyntaxError: invalid syntax>>> ls[1, 2, 7]>>> ls = [159.99, 160.00, 205.95, 128.83, 175.49]>>> ls.append(160.0)>>> ls[159.99, 160.0, 205.95, 128.83, 175.49, 160.0]>>> ls.count(160.0)2>>> ls.min()Traceback (most recent call last):  File "<stdin>", line 1, in <module>AttributeError: 'list' object has no attribute 'min'>>> min(ls)128.83>>> ls.index(128.83)3>>> ls.remove(128.83)>>> ls.sort()>>> ls[159.99, 160.0, 160.0, 175.49, 205.95]>>> type(160.0)<class 'float'>>>> type(160.00)<class 'float'>>>> x = 3>>> x3>>> type(x)<class 'int'>>>> x = int()>>> x0>>> x = '3'>>> x'3'>>> type(x)<class 'str'>>>> x = int(x)>>> x3>>> type(x)<class 'int'>>>> s'hello'>>> s = int(s... )Traceback (most recent call last):  File "<stdin>", line 1, in <module>ValueError: invalid literal for int() with base 10: 'hello'>>> 4/22.0>>> list(s)['h', 'e', 'l', 'l', 'o']>>> float('45.6')45.6>>> float(2**24)16777216.0>>> float(2**1024)Traceback (most recent call last):  File "<stdin>", line 1, in <module>OverflowError: int too large to convert to float>>> i = 2.4>>> type(i)<class 'float'>>>> s'hello'>>> s+iTraceback (most recent call last):  File "<stdin>", line 1, in <module>TypeError: Can't convert 'float' object to str implicitly>>> s+1Traceback (most recent call last):  File "<stdin>", line 1, in <module>TypeError: Can't convert 'int' object to str implicitly>>> print(s,i)hello 2.4>>> print(s+i)Traceback (most recent call last):  File "<stdin>", line 1, in <module>TypeError: Can't convert 'float' object to str implicitly>>> print(s+str(i))hello2.4>>> print(s+' '+str(i))hello 2.4>>> fish=['goldfish']>>> my_pets = ['cat', 'dog']>>> fish * 3['goldfish', 'goldfish', 'goldfish']>>> pets = fish + my_pets>>> pets['goldfish', 'cat', 'dog']>>> 'frog' in petsFalse>>> pets[-1]'dog'>>> print(x)3>>> restart()Traceback (most recent call last):  File "<stdin>", line 1, in <module>NameError: name 'restart' is not defined>>> restartTraceback (most recent call last):  File "<stdin>", line 1, in <module>NameError: name 'restart' is not defined>>> quit()[woha@silo ~]$ pythonPython 2.7.5 (default, Aug  9 2016, 05:27:46) [GCC 4.8.5 20150623 (Red Hat 4.8.5-4)] on linux2Type "help", "copyright", "credits" or "license" for more information.>>> quit()[woha@silo ~]$ python3Python 3.5.2 (default, Aug 19 2016, 07:40:05) [GCC 4.8.5 20150623 (Red Hat 4.8.5-4)] on linuxType "help", "copyright", "credits" or "license" for more information.>>> print(x)Traceback (most recent call last):  File "<stdin>", line 1, in <module>NameError: name 'x' is not defined>>> print(3)3>>> print()>>> typr(print)Traceback (most recent call last):  File "<stdin>", line 1, in <module>NameError: name 'typr' is not defined>>> print(print())None>>> name = input('Enter you name:")  File "<stdin>", line 1    name = input('Enter you name:")                                  ^SyntaxError: EOL while scanning string literal>>> name = input('Enter you name: ')Enter you name: Yong>>> name'Yong'>>> age = input("Enter your age: ")Enter your age: 18>>> age'18'>>> int(age)18>>> eval('18')18>>> eval('age')'18'>>> eval('[2, 3+5]')[2, 8]>>> eval('x')Traceback (most recent call last):  File "<stdin>", line 1, in <module>  File "<string>", line 1, in <module>NameError: name 'x' is not defined>>> 